"use strict";(self.webpackChunkplanetdocs=self.webpackChunkplanetdocs||[]).push([[41],{3905:function(e,r,n){n.d(r,{Zo:function(){return c},kt:function(){return m}});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function p(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),u=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},c=function(e){var r=u(e.components);return t.createElement(s.Provider,{value:r},e.children)},l={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},y=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),y=u(n),m=o,f=y["".concat(s,".").concat(m)]||y[m]||l[m]||a;return n?t.createElement(f,i(i({ref:r},c),{},{components:n})):t.createElement(f,i({ref:r},c))}));function m(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=y;var p={};for(var s in r)hasOwnProperty.call(r,s)&&(p[s]=r[s]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var u=2;u<a;u++)i[u]=n[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}y.displayName="MDXCreateElement"},4398:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return y}});var t=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],p={sidebar_position:2},s="Query syntax",u={unversionedId:"lens-guide/syntax",id:"lens-guide/syntax",title:"Query syntax",description:"Lens queries are written in a simple, declarative language. The LALRPOP grammar definition is given below:",source:"@site/docs/lens-guide/syntax.md",sourceDirName:"lens-guide",slug:"/lens-guide/syntax",permalink:"/lens-guide/syntax",editUrl:"https://github.com/BlueLogicLabs/planet-docs/blob/main/docs/lens-guide/syntax.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Lens-based access control",permalink:"/lens-guide/lbac"},next:{title:"Version history",permalink:"/data/version-history"}},c=[],l={toc:c};function y(e){var r=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,t.Z)({},l,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"query-syntax"},"Query syntax"),(0,a.kt)("p",null,"Lens queries are written in a simple, declarative language. The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/lalrpop/lalrpop"},"LALRPOP")," grammar definition is given below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'pub Expr: Box<GraphQueryExpr<\'input>> = {\n  #[precedence(level="1")]\n  <e:E1> =>? e.cost(st, 1),\n\n  #[precedence(level="2")]\n  "not" <expr:Expr> =>? Box::new(GraphQueryExpr::Not {\n    expr,\n  }).cost(st, 1),\n\n  #[precedence(level="3")]\n  #[assoc(side="left")]\n  <left:Expr> "and" <right:Expr> =>? Box::new(GraphQueryExpr::And {\n    left,\n    right,\n  }).cost(st, 1),\n\n  #[precedence(level="4")]\n  #[assoc(side="left")]\n  <left:Expr> "or" <right:Expr> =>? Box::new(GraphQueryExpr::Or {\n    left,\n    right,\n  }).cost(st, 1),\n}\n\nE1: Box<GraphQueryExpr<\'input>> = {\n  "true" => Box::new(GraphQueryExpr::True),\n  "1" => Box::new(GraphQueryExpr::True),\n  "false" => Box::new(GraphQueryExpr::False),\n  "0" => Box::new(GraphQueryExpr::False),\n  "tag" <tag:Str> => Box::new(GraphQueryExpr::HasTag { tag }),\n  "id" <id:Str> => Box::new(GraphQueryExpr::HasId { id }),\n  "before" <time:Date> => Box::new(GraphQueryExpr::TimeBefore { time }),\n  "after" <time:Date> => Box::new(GraphQueryExpr::TimeAfter { time }),\n  "public" => Box::new(GraphQueryExpr::Public),\n  "every" <x:Every> => x,\n  "(" <e:Expr> ")" => e,\n}\n\nEvery: Box<GraphQueryExpr<\'input>> = {\n  "day" <x:Everyday> => x,\n}\n\nEveryday: Box<GraphQueryExpr<\'input>> = {\n  "between" <from:TimeOfDay> "and" <to:TimeOfDay> "utc" => Box::new(GraphQueryExpr::Everyday { from, to }),\n  "after" <from:TimeOfDay> "utc" => Box::new(GraphQueryExpr::Everyday { from, to: 86400_000 - 1 }),\n  "before" <to:TimeOfDay> "utc" => Box::new(GraphQueryExpr::Everyday { from: 0, to }),\n}\n\nTimeOfDay: u64 = {\n  <s:Str> =>? chrono::NaiveTime::parse_from_str(&s, "%H:%M")\n    .map(|x| u64::try_from(x.signed_duration_since(chrono::NaiveTime::from_hms(0, 0, 0)).num_milliseconds()).unwrap_or(0))\n    .map_err(|_| ParseError::User {\n      error: GraphQueryParseError::InvalidTimeOfDay,\n    })\n}\n\nStr: Cow<\'input, str> = {\n  <s:r#""[^"]*""#> => Cow::Borrowed(s.trim_matches(\'"\')),\n  <s:r#"\'[^\']*\'"#> => Cow::Borrowed(s.trim_matches(\'\\\'\')),\n  <s:r#"[^\'"\\s()]+"#> => Cow::Borrowed(s),\n}\n\nDate: u64 = {\n  <s:Str> =>? chrono::NaiveDate::parse_from_str(&s, "%Y-%m-%d")\n    .map(|x| u64::try_from(x.signed_duration_since(chrono::NaiveDate::from_ymd(1970, 1, 1)).num_milliseconds()).unwrap_or(0))\n    .map_err(|_| ParseError::User {\n      error: GraphQueryParseError::InvalidDate,\n    })\n}\n')))}y.isMDXComponent=!0}}]);